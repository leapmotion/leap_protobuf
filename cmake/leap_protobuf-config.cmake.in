# User options
include("${CMAKE_CURRENT_LIST_DIR}/leap_protobuf-options.cmake")

# Depend packages
@_leap_protobuf_FIND_ZLIB@

# Imported targets
include("${CMAKE_CURRENT_LIST_DIR}/leap_protobuf-targets.cmake")

function(leap_protobuf_generate)
  include(CMakeParseArguments)

  set(_options APPEND_PATH)
  set(_singleargs LANGUAGE OUT_VAR EXPORT_MACRO)
  if(COMMAND target_sources)
    list(APPEND _singleargs TARGET)
  endif()
  set(_multiargs PROTOS IMPORT_DIRS GENERATE_EXTENSIONS)

  cmake_parse_arguments(leap_protobuf_generate "${_options}" "${_singleargs}" "${_multiargs}" "${ARGN}")

  if(NOT leap_protobuf_generate_PROTOS AND NOT leap_protobuf_generate_TARGET)
    message(SEND_ERROR "Error: leap_protobuf_generate called without any targets or source files")
    return()
  endif()

  if(NOT leap_protobuf_generate_OUT_VAR AND NOT leap_protobuf_generate_TARGET)
    message(SEND_ERROR "Error: leap_protobuf_generate called without a target or output variable")
    return()
  endif()

  if(NOT leap_protobuf_generate_LANGUAGE)
    set(leap_protobuf_generate_LANGUAGE cpp)
  endif()
  string(TOLOWER ${leap_protobuf_generate_LANGUAGE} leap_protobuf_generate_LANGUAGE)

  if(leap_protobuf_generate_EXPORT_MACRO AND leap_protobuf_generate_LANGUAGE STREQUAL cpp)
    set(_dll_export_decl "dllexport_decl=${leap_protobuf_generate_EXPORT_MACRO}:")
  endif()

  if(NOT leap_protobuf_GENERATE_EXTENSIONS)
    if(leap_protobuf_generate_LANGUAGE STREQUAL cpp)
      set(leap_protobuf_GENERATE_EXTENSIONS .pb.h .pb.cc)
    elseif(leap_protobuf_generate_LANGUAGE STREQUAL python)
      set(leap_protobuf_GENERATE_EXTENSIONS _pb2.py)
    else()
      message(SEND_ERROR "Error: leap_protobuf_generate given unknown Language ${LANGUAGE}, please provide a value for GENERATE_EXTENSIONS")
      return()
    endif()
  endif()

  if(leap_protobuf_generate_TARGET)
    get_target_property(_source_list ${leap_protobuf_generate_TARGET} SOURCES)
    foreach(_file ${_source_list})
      if(_file MATCHES "proto$")
        list(APPEND leap_protobuf_generate_PROTOS ${_file})
      endif()
    endforeach()
  endif()

  if(NOT leap_protobuf_generate_PROTOS)
    message(SEND_ERROR "Error: leap_protobuf_generate could not find any .proto files")
    return()
  endif()

  if(leap_protobuf_generate_APPEND_PATH)
    # Create an include path for each file specified
    foreach(_file ${leap_protobuf_generate_PROTOS})
      get_filename_component(_abs_file ${_file} ABSOLUTE)
      get_filename_component(_abs_path ${_abs_file} PATH)
      list(FIND _leap_protobuf_include_path ${_abs_path} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _leap_protobuf_include_path -I ${_abs_path})
      endif()
    endforeach()
  else()
    set(_leap_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  foreach(DIR ${leap_protobuf_generate_IMPORT_DIRS})
    get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
    list(FIND _leap_protobuf_include_path ${ABS_PATH} _contains_already)
    if(${_contains_already} EQUAL -1)
        list(APPEND _leap_protobuf_include_path -I ${ABS_PATH})
    endif()
  endforeach()

  set(_generated_srcs_all)
  foreach(_proto ${leap_protobuf_generate_PROTOS})
    get_filename_component(_abs_file ${_proto} ABSOLUTE)
    get_filename_component(_basename ${_proto} NAME_WE)

    set(_generated_srcs)
    foreach(_ext ${leap_protobuf_GENERATE_EXTENSIONS})
      list(APPEND _generated_srcs "${CMAKE_CURRENT_BINARY_DIR}/${_basename}${_ext}")
    endforeach()
    list(APPEND _generated_srcs_all ${_generated_srcs})

    add_custom_command(
      OUTPUT ${_generated_srcs}
      COMMAND  leap_protobuf::protoc
      ARGS --${leap_protobuf_generate_LANGUAGE}_out ${_dll_export_decl}${CMAKE_CURRENT_BINARY_DIR} ${_leap_protobuf_include_path} ${_abs_file}
      DEPENDS ${ABS_FIL} leap_protobuf::protoc
      COMMENT "Running ${leap_protobuf_generate_LANGUAGE} protocol buffer compiler on ${_proto}"
      VERBATIM )
  endforeach()

  set_source_files_properties(${_generated_srcs_all} PROPERTIES GENERATED TRUE)
  if(leap_protobuf_generate_OUT_VAR)
    set(${leap_protobuf_generate_OUT_VAR} ${_generated_srcs_all} PARENT_SCOPE)
  endif()
  if(leap_protobuf_generate_TARGET)
    target_sources(${leap_protobuf_generate_TARGET} PRIVATE ${_generated_srcs_all})
  endif()

endfunction()

# CMake FindProtobuf module compatible file
if(leap_protobuf_MODULE_COMPATIBLE)
  include("${CMAKE_CURRENT_LIST_DIR}/leap_protobuf-module.cmake")
endif()
